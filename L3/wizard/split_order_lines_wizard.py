# -*- coding: utf-8 -*-

from odoo import api, fields, models, _
from odoo.exceptions import ValidationError


class SplitOrderLinesWizard(models.TransientModel):
    _name = 'split.order.lines.wizard'
    _description = 'Wizard –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ª–∏–Ω–∏–π –∑–∞–∫–∞–∑–∞'

    sale_order_id = fields.Many2one('sale.order', string='–ó–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É', required=True)
    line_ids = fields.One2many('split.order.lines.wizard.line', 'wizard_id', string='–õ–∏–Ω–∏–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è')

    @api.model
    def default_get(self, fields_list):
        """–ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è wizard"""
        result = super().default_get(fields_list)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        sale_order_id = self.env.context.get('default_sale_order_id') or self.env.context.get('active_id')
        if sale_order_id:
            result['sale_order_id'] = sale_order_id
        
        return result

    @api.model_create_multi
    def create(self, vals_list):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è wizard"""
        import logging
        _logger = logging.getLogger(__name__)
        _logger.info(f"Wizard create: vals_list = {vals_list}")
        
        wizards = super().create(vals_list)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ wizard
        for wizard in wizards:
            _logger.info(f"Wizard created: {wizard.id}, sale_order_id: {wizard.sale_order_id.id if wizard.sale_order_id else None}")
        
        return wizards

    def action_split_lines(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π –∑–∞–∫–∞–∑–∞"""
        self.ensure_one()
        
        if not self.line_ids:
            raise ValidationError(_('–ù–µ—Ç –ª–∏–Ω–∏–π –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        for line in self.line_ids:
            line._validate_split_data()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ª–∏–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã
        total_new_lines = sum(line.number_of_splits for line in self.line_ids)
        original_lines_count = len(self.line_ids)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        for line in self.line_ids:
            line._split_order_line()
        
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–∂–∫–∏ Split –≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–∏–Ω–∏—è—Ö –∑–∞–∫–∞–∑–∞
        if self.sale_order_id:
            remaining_lines = self.sale_order_id.order_line.filtered('split_line')
            if remaining_lines:
                remaining_lines.write({'split_line': False})
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç—Ç–µ—Ä
            self._post_split_message(original_lines_count, total_new_lines)
        
        return {
            'type': 'ir.actions.client',
            'tag': 'reload',
        }
    
    def _post_split_message(self, original_lines_count, total_new_lines):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç—Ç–µ—Ä"""
        if not self.sale_order_id:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user = self.env.user
        user_name = current_user.name or current_user.login or '–°–∏—Å—Ç–µ–º–∞'
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if original_lines_count == 1:
            lines_text = "–ª–∏–Ω–∏—é"
        elif original_lines_count in [2, 3, 4]:
            lines_text = "–ª–∏–Ω–∏–∏"
        else:
            lines_text = "–ª–∏–Ω–∏–π"
            
        if total_new_lines == 1:
            new_lines_text = "–ª–∏–Ω–∏—é"
        elif total_new_lines in [2, 3, 4]:
            new_lines_text = "–ª–∏–Ω–∏–∏"
        else:
            new_lines_text = "–ª–∏–Ω–∏–π"
        
        message = f"üîÑ –†–∞–∑–¥–µ–ª–µ–Ω–æ {original_lines_count} {lines_text} –Ω–∞ {total_new_lines} {new_lines_text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name}"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —á–∞—Ç—Ç–µ—Ä
        self.sale_order_id.message_post(
            body=message,
            message_type='notification',
            subtype_xmlid='mail.mt_note'
        )


class SplitOrderLinesWizardLine(models.TransientModel):
    _name = 'split.order.lines.wizard.line'
    _description = '–õ–∏–Ω–∏—è wizard –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'

    wizard_id = fields.Many2one('split.order.lines.wizard', string='Wizard', required=True, ondelete='cascade')
    order_line_id = fields.Many2one('sale.order.line', string='–ò—Å—Ö–æ–¥–Ω–∞—è –ª–∏–Ω–∏—è –∑–∞–∫–∞–∑–∞', required=True)
    product_id = fields.Many2one('product.product', string='–ü—Ä–æ–¥—É–∫—Ç', related='order_line_id.product_id', readonly=True)
    product_template_id = fields.Many2one('product.template', string='–®–∞–±–ª–æ–Ω –ø—Ä–æ–¥—É–∫—Ç–∞', related='order_line_id.product_template_id', readonly=True)
    product_name = fields.Char(string='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', related='order_line_id.product_template_id.name', readonly=True)
    original_quantity = fields.Float(string='–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', related='order_line_id.product_uom_qty', readonly=True)
    number_of_splits = fields.Integer(string='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π', default=1, required=True)
    split_quantities = fields.Text(string='–ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è', 
                                   help='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2,3,1)')
    display_name = fields.Char(compute='_compute_display_name', store=True)
    
    @api.depends('order_line_id', 'product_template_id')
    def _compute_display_name(self):
        """–í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏"""
        for record in self:
            if record.product_template_id:
                record.display_name = record.product_template_id.name
            elif record.order_line_id:
                record.display_name = f"Line {record.order_line_id.id}"
            else:
                record.display_name = "Unknown"
    
    @api.model_create_multi
    def create(self, vals_list):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º create –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        import logging
        _logger = logging.getLogger(__name__)
        _logger.info(f"WizardLine create: vals_list = {vals_list}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
        for vals in vals_list:
            if not vals.get('order_line_id'):
                _logger.warning("WizardLine create: order_line_id not provided in vals")
        
        wizard_lines = super().create(vals_list)
        _logger.info(f"WizardLine created: {len(wizard_lines)} lines")
        
        return wizard_lines
    
    @api.onchange('number_of_splits', 'original_quantity')
    def _onchange_number_of_splits(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π"""
        if self.number_of_splits > 0 and self.original_quantity > 0:
            # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            base_quantity = self.original_quantity / self.number_of_splits
            quantities = []
            total_allocated = 0
            
            for i in range(self.number_of_splits):
                if i == self.number_of_splits - 1:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å –ø–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
                    remaining = self.original_quantity - total_allocated
                    quantities.append(str(round(remaining, 3)))
                else:
                    allocated = round(base_quantity, 3)
                    quantities.append(str(allocated))
                    total_allocated += allocated
            
            self.split_quantities = ','.join(quantities)

    def _validate_split_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è"""
        if self.number_of_splits <= 0:
            raise ValidationError(_('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'))
        
        if not self.split_quantities:
            raise ValidationError(_('–ù–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è'))
        
        try:
            quantities = [float(q.strip()) for q in self.split_quantities.split(',')]
        except ValueError:
            raise ValidationError(_('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'))
        
        if len(quantities) != self.number_of_splits:
            raise ValidationError(_('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π'))
        
        if any(q <= 0 for q in quantities):
            raise ValidationError(_('–í—Å–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 0'))
        
        if abs(sum(quantities) - self.original_quantity) > 0.001:
            raise ValidationError(_('–°—É–º–º–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤ –¥–æ–ª–∂–Ω–∞ —Ä–∞–≤–Ω—è—Ç—å—Å—è –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (%s)') % self.original_quantity)

    def _split_order_line(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"""
        import logging
        _logger = logging.getLogger(__name__)
        
        self._validate_split_data()
        
        quantities = [float(q.strip()) for q in self.split_quantities.split(',')]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ª–∏–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω–æ–π
        original_line = self.order_line_id
        new_lines = []
        
        _logger.info(f"Splitting line {original_line.id}: product_id={original_line.product_id.id}, product_template_id={original_line.product_template_id.id}")
        
        for i, quantity in enumerate(quantities):
            line_vals = {
                'order_id': original_line.order_id.id,
                'product_id': original_line.product_id.id,
                'product_template_id': original_line.product_template_id.id,
                'name': original_line.name,
                'product_uom_qty': quantity,
                'product_uom': original_line.product_uom.id,
                'price_unit': original_line.price_unit,
                'tax_id': [(6, 0, original_line.tax_id.ids)],
                'discount': original_line.discount,
                'express_delivery': original_line.express_delivery,
                'split_line': False,  # –ù–æ–≤—ã–µ –ª–∏–Ω–∏–∏ –Ω–µ –ø–æ–º–µ—á–µ–Ω—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                'sequence': original_line.sequence,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                'display_type': original_line.display_type,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            }
            
            _logger.info(f"Creating new line {i+1} with vals: {line_vals}")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                new_line = self.env['sale.order.line'].with_context(split_operation=True).create(line_vals)
                new_lines.append(new_line)
                _logger.info(f"Created new line {new_line.id}: product_id={new_line.product_id.id}")
            except Exception as e:
                _logger.error(f"Error creating new line: {e}")
                raise ValidationError(_('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ª–∏–Ω–∏–∏: %s') % str(e))
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ª–∏–Ω–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        _logger.info(f"Deleting original line {original_line.id}")
        original_line.with_context(split_operation=True).unlink()
        
        return new_lines
