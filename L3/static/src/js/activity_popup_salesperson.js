/** @odoo-module **/

console.log('Activity popup salesperson module loaded');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ salesperson –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
function addSalespersonToPopup() {
    // –ò—â–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
    const popupSelectors = [
        '.o_popover:not([style*="display: none"])',
        '.popover:not([style*="display: none"])',
        '.o_activity_popup:not([style*="display: none"])',
        '.tooltip:not([style*="display: none"])',
        '.dropdown-menu:not([style*="display: none"])',
        '.o_dropdown_menu:not([style*="display: none"])'
    ];
    
    popupSelectors.forEach(selector => {
        const popups = document.querySelectorAll(selector);
        
        popups.forEach(popup => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (isActivityPopup(popup)) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ salesperson
                if (!popup.querySelector('.salesperson-info')) {
                    addSalespersonInfo(popup);
                }
            }
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –æ–∫–Ω–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
function isActivityPopup(popup) {
    const text = popup.textContent.toLowerCase();
    const hasActivityText = text.includes('schedule activities') || 
                           text.includes('schedule an activity') ||
                           text.includes('activity') ||
                           text.includes('–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å') ||
                           text.includes('–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
    
    const hasActivityButton = popup.querySelector('button[title*="activity"], .btn[title*="activity"], [data-action*="activity"]');
    const hasActivityClass = popup.classList.contains('o_activity_popup') ||
                            popup.classList.contains('activity-popup');
    
    return hasActivityText || hasActivityButton || hasActivityClass;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ salesperson
function addSalespersonInfo(popup) {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã
    const tableRow = getCurrentTableRow();
    if (!tableRow) return;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ salesperson –∏–∑ —Å—Ç—Ä–æ–∫–∏
    const salespersonInfo = getSalespersonFromRow(tableRow);
    if (!salespersonInfo) return;
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ salesperson
    const salespersonDiv = document.createElement('div');
    salespersonDiv.className = 'salesperson-info';
    salespersonDiv.style.cssText = `
        margin: 8px 0;
        padding: 8px;
        background-color: #f8f9fa;
        border-radius: 4px;
        border-left: 3px solid #007bff;
        font-size: 13px;
        color: #495057;
    `;
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è salesperson
    salespersonDiv.innerHTML = `
        <div style="display: flex; align-items: center; gap: 8px;">
            <div style="width: 24px; height: 24px; border-radius: 50%; background-color: #007bff; 
                        display: flex; align-items: center; justify-content: center; color: white; font-size: 12px;">
                ${salespersonInfo.avatar || 'üë§'}
            </div>
            <div>
                <div style="font-weight: 500; color: #007bff;">Salesperson:</div>
                <div style="font-size: 12px; color: #6c757d;">${salespersonInfo.name}</div>
            </div>
        </div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    const content = popup.querySelector('.popover-body, .tooltip-inner, .o_popover_content');
    if (content) {
        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π "Schedule an activity"
        const button = content.querySelector('button, .btn, [title*="Schedule"]');
        if (button) {
            button.parentNode.insertBefore(salespersonDiv, button);
        } else {
            content.appendChild(salespersonDiv);
        }
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
        popup.insertBefore(salespersonDiv, popup.firstChild);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
function getCurrentTableRow() {
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã, –Ω–∞–¥ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
    const popup = document.querySelector('.o_popover:not([style*="display: none"]), .popover:not([style*="display: none"]), .tooltip:not([style*="display: none"])');
    if (!popup) return null;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
    const popupRect = popup.getBoundingClientRect();
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    const tableRows = document.querySelectorAll('tr[data-id], .o_data_row');
    
    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º –æ–∫–Ω–æ–º
    for (const row of tableRows) {
        const rowRect = row.getBoundingClientRect();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º –æ–∫–Ω–æ–º
        if (rowRect.top <= popupRect.bottom && rowRect.bottom >= popupRect.top) {
            return row;
        }
    }
    
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ salesperson –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
function getSalespersonFromRow(row) {
    // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å salesperson
    const salespersonSelectors = [
        '[data-name="user_id"]',
        '.o_field_salesperson',
        '.o_salesperson_cell',
        '.o_field_many2one[data-name="user_id"]',
        '.o_data_cell[data-name="user_id"]',
        'td[data-name="user_id"]'
    ];
    
    // –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å salesperson
    let salespersonCell = null;
    for (const selector of salespersonSelectors) {
        salespersonCell = row.querySelector(selector);
        if (salespersonCell) break;
    }
    
    if (salespersonCell) {
        // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä
        const avatarSelectors = ['img', '.o_avatar', '.avatar', '.o_user_avatar'];
        let avatar = null;
        let avatarSrc = null;
        
        for (const selector of avatarSelectors) {
            avatar = salespersonCell.querySelector(selector);
            if (avatar) {
                avatarSrc = avatar.src || avatar.style.backgroundImage;
                break;
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è
        const nameSelectors = ['.o_field_char', '.o_input', '.o_field_text', 'span', 'div', '.o_data_cell'];
        let name = 'Unknown';
        
        for (const selector of nameSelectors) {
            const nameElement = salespersonCell.querySelector(selector);
            if (nameElement && nameElement.textContent.trim()) {
                name = nameElement.textContent.trim();
                break;
            }
        }
        
        return {
            name: name,
            avatar: avatarSrc
        };
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–∏—Å–∫ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ (–æ–±—ã—á–Ω–æ salesperson –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏)
    const cells = row.querySelectorAll('td, .o_data_cell');
    const salespersonPosition = 4; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∫–æ–ª–æ–Ω–∫–∏ salesperson (0-based)
    
    if (cells.length > salespersonPosition) {
        const salespersonCell = cells[salespersonPosition];
        const text = salespersonCell.textContent.trim();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —è—á–µ–π–∫–∞ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (text && text.length > 2 && text.length < 50 && 
            !text.match(/^\d+$/) && 
            !text.includes('@') &&
            !text.match(/\d{2}\/\d{2}\/\d{4}/) && 
            !text.match(/^S\d+$/) &&
            !text.match(/^\d{2}:\d{2}/)) {
            
            // –ò—â–µ–º –∞–≤–∞—Ç–∞—Ä –≤ —ç—Ç–æ–π —è—á–µ–π–∫–µ
            const avatar = salespersonCell.querySelector('img, .o_avatar, .avatar');
            const avatarSrc = avatar ? avatar.src || avatar.style.backgroundImage : null;
            
            return {
                name: text,
                avatar: avatarSrc
            };
        }
    }
    
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
function observePopups() {
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
    const observer = new MutationObserver((mutations) => {
        let shouldCheck = false;
        
        mutations.forEach((mutation) => {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === 1 && (
                        node.classList?.contains('o_popover') ||
                        node.classList?.contains('popover') ||
                        node.classList?.contains('tooltip') ||
                        node.querySelector?.('.o_popover, .popover, .tooltip')
                    )) {
                        shouldCheck = true;
                    }
                });
            }
        });
        
        if (shouldCheck) {
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
            setTimeout(addSalespersonToPopup, 100);
        }
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        setTimeout(observePopups, 1000);
        setTimeout(addSalespersonToPopup, 1500);
    });
} else {
    setTimeout(observePopups, 1000);
    setTimeout(addSalespersonToPopup, 1500);
}

// –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
window.addEventListener('resize', () => {
    setTimeout(addSalespersonToPopup, 100);
});

window.addEventListener('scroll', () => {
    setTimeout(addSalespersonToPopup, 100);
});

console.log('Activity popup salesperson module initialized');
